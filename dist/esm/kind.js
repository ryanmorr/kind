/*! @ryanmorr/kind v0.1.0 | https://github.com/ryanmorr/kind */
const t=new Map,r=new Map,n=new Map;function e(t){return r=>function(t){return{}.toString.call(t).slice(8,-1).toLowerCase()}(r)==t}function o(t,r){return r.some((r=>s(t,r)))}function u(r){const n=Symbol();return t.set(n,r),n}function i(t,r,n){const e=n.get(r);return!!e&&e(t)}function c(t,r){for(const[n,e]of r)if(e(t))return n;return null}function s(e,u){return void 0!==u?Array.isArray(u)?o(e,u):i(e,u,r)||i(e,u,t)||i(e,u,n):c(e,r)||c(e,t)||L}function a(t){const e=Symbol();var u;return Array.isArray(t)?n.set(e,(u=t,t=>o(t,u))):r.set(e,t),e}const f=u((t=>null===t)),l=u((t=>void 0===t)),y=u(e("string")),b=u(e("boolean")),p=u(Number.isNaN),m=u(e("number")),g=u(e("symbol")),w=u((function(t){if(!t||"object"!=typeof t)return!1;const r=Object.getPrototypeOf(t);return null===r||r===Object.getPrototypeOf({})})),A=u(e("object")),j=u(Array.isArray),O=u((t=>"function"==typeof t)),S=u(e("set")),d=u(e("weakset")),v=u(e("map")),M=u(e("weakmap")),N=u((t=>Symbol.iterator in Object(t))),k=u(e("regexp")),x=u(e("date")),P=u(e("error")),h=u(e("promise")),C=u((t=>t===globalThis)),L=Symbol();export{j as KIND_ARRAY,b as KIND_BOOLEAN,x as KIND_DATE,P as KIND_ERROR,O as KIND_FUNCTION,C as KIND_GLOBAL,N as KIND_ITERABLE,v as KIND_MAP,p as KIND_NAN,f as KIND_NULL,m as KIND_NUMBER,A as KIND_OBJECT,w as KIND_PLAIN_OBJECT,h as KIND_PROMISE,k as KIND_REGEXP,S as KIND_SET,y as KIND_STRING,g as KIND_SYMBOL,l as KIND_UNDEFINED,L as KIND_UNKNOWN,M as KIND_WEAK_MAP,d as KIND_WEAK_SET,a as def,s as kind};
